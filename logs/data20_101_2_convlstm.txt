/data/lakshya/neuraloperator/neuralop/models/base_model.py:21: UserWarning: Creating a subclass of BaseModel FNO1d with no name, initializing with FNO1d.
  warnings.warn(f'Creating a subclass of BaseModel {cls.__name__} with no name, initializing with {cls.__name__}.')
/data/lakshya/neuraloperator/neuralop/models/base_model.py:21: UserWarning: Creating a subclass of BaseModel FNO2d with no name, initializing with FNO2d.
  warnings.warn(f'Creating a subclass of BaseModel {cls.__name__} with no name, initializing with {cls.__name__}.')
/data/lakshya/neuraloperator/neuralop/models/base_model.py:21: UserWarning: Creating a subclass of BaseModel FNO3d with no name, initializing with FNO3d.
  warnings.warn(f'Creating a subclass of BaseModel {cls.__name__} with no name, initializing with {cls.__name__}.')
/data/lakshya/neuraloperator/neuralop/models/base_model.py:21: UserWarning: Creating a subclass of BaseModel TFNO with no name, initializing with TFNO.
  warnings.warn(f'Creating a subclass of BaseModel {cls.__name__} with no name, initializing with {cls.__name__}.')
/data/lakshya/neuraloperator/neuralop/models/base_model.py:21: UserWarning: Creating a subclass of BaseModel TFNO1d with no name, initializing with TFNO1d.
  warnings.warn(f'Creating a subclass of BaseModel {cls.__name__} with no name, initializing with {cls.__name__}.')
/data/lakshya/neuraloperator/neuralop/models/base_model.py:21: UserWarning: Creating a subclass of BaseModel TFNO2d with no name, initializing with TFNO2d.
  warnings.warn(f'Creating a subclass of BaseModel {cls.__name__} with no name, initializing with {cls.__name__}.')
/data/lakshya/neuraloperator/neuralop/models/base_model.py:21: UserWarning: Creating a subclass of BaseModel TFNO3d with no name, initializing with TFNO3d.
  warnings.warn(f'Creating a subclass of BaseModel {cls.__name__} with no name, initializing with {cls.__name__}.')
/data/lakshya/neuraloperator/neuralop/models/base_model.py:21: UserWarning: Creating a subclass of BaseModel SFNO with no name, initializing with SFNO.
  warnings.warn(f'Creating a subclass of BaseModel {cls.__name__} with no name, initializing with {cls.__name__}.')
DHPM device updated to cuda:6
Model Name:convlstm
Model Class:<class 'models.baselines.ConvLSTM.CLSTM'>
sample_x.shape:torch.Size([62, 64, 64])
sample_y.shape:torch.Size([4, 2, 64, 64])
sample_x[0].shape:torch.Size([64, 64])
  0%|          | 0/50 [00:00<?, ?it/s]  0%|          | 0/50 [00:06<?, ?it/s]
Traceback (most recent call last):
  File "/data/lakshya/Turbulent-Flow-Net/run_model.py", line 236, in <module>
    train_rmse.append(train_epoch(train_loader, model, optimizer, train_loss_fun, coef, regularizer, update_disc if model_str == 'gan' else None))
  File "/data/lakshya/Turbulent-Flow-Net/utils/train_utils.py", line 50, in train_epoch
    im = model(xx)
  File "/home/ubuntu/.conda/envs/tfnet/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
  File "/data/lakshya/Turbulent-Flow-Net/models/baselines/ConvLSTM.py", line 158, in forward
    out = self.clstm(xx)[0][0]
  File "/home/ubuntu/.conda/envs/tfnet/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
  File "/data/lakshya/Turbulent-Flow-Net/models/baselines/ConvLSTM.py", line 110, in forward
    h, c = self.cell_list[layer_idx](input_tensor=cur_layer_input[:, t, :, :, :],
  File "/home/ubuntu/.conda/envs/tfnet/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
  File "/data/lakshya/Turbulent-Flow-Net/models/baselines/ConvLSTM.py", line 35, in forward
    combined_conv = self.conv(combined)
  File "/home/ubuntu/.conda/envs/tfnet/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/ubuntu/.conda/envs/tfnet/lib/python3.10/site-packages/torch/nn/modules/conv.py", line 463, in forward
    return self._conv_forward(input, self.weight, self.bias)
  File "/home/ubuntu/.conda/envs/tfnet/lib/python3.10/site-packages/torch/nn/modules/conv.py", line 459, in _conv_forward
    return F.conv2d(input, weight, bias, self.stride,
torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 16.00 MiB (GPU 6; 10.75 GiB total capacity; 6.78 GiB already allocated; 11.62 MiB free; 7.58 GiB reserved in total by PyTorch) If reserved memory is >> allocated memory try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF
